package sm4

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

// These tests are based on the SM4 specification
// English translated paper: https://eprint.iacr.org/2008/329.pdf

func TestExampleOne(t *testing.T) {
	dst := make([]byte, 16) // used to store output of encrypt stage because we will redecrypt and check against plaintext
	// 01 23 45 67 89 ab cd ef fe dc ba 98 76 54 32 10
	plaintext := []byte{0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10}
	// 01 23 45 67 89 ab cd ef fe dc ba 98 76 54 32 10
	key := []byte{0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10}
	cipher, err := NewCipher(key)
	require.NoError(t, err)
	cipher.Encrypt(dst, plaintext)
	// 0x68 0x1e 0xdf 0x34  0xd2 0x6 0x96 0x5e  0x86 0xb3 0xe9 0x4f  0x53 0x6e 0x42 0x46
	cipherText := []byte{0x68, 0x1e, 0xdf, 0x34, 0xd2, 0x6, 0x96, 0x5e, 0x86, 0xb3, 0xe9, 0x4f, 0x53, 0x6e, 0x42, 0x46}
	assert.Equal(t, cipherText, dst)
	cipher.Decrypt(dst, dst)
	assert.Equal(t, plaintext, dst)
}

func TestExampleTwo(t *testing.T) {
	// 01 23 45 67 89 ab cd ef fe dc ba 98 76 54 32 10
	plaintext := []byte{0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10}
	// 01 23 45 67 89 ab cd ef fe dc ba 98 76 54 32 10
	key := []byte{0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10}
	cipher, err := NewCipher(key)
	require.NoError(t, err)

	for i := 0; i < 1_000_000; i++ {
		cipher.Encrypt(plaintext, plaintext)
	}

	// 0x59 0x52 0x98 0xc7 0xc6 0xfd 0x27 0x1f 0x04 0x02 0xf8 0x04 0xc3 0x3d 0x3f 0x66
	cipherText := []byte{0x59, 0x52, 0x98, 0xc7, 0xc6, 0xfd, 0x27, 0x1f, 0x04, 0x02, 0xf8, 0x04, 0xc3, 0x3d, 0x3f, 0x66}
	assert.Equal(t, cipherText, plaintext)
}
